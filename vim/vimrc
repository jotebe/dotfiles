set nocompatible

" Bundles {
  filetype off " required by vundle

  set rtp+=~/.vim/bundle/vundle/
  call vundle#rc()

  " Awesome management of Vim plugins
  Bundle 'gmarik/vundle'
  " Reverse-incremental file finding
  Bundle 'wincent/Command-T'
  " massive collection of colorschemes
  Bundle 'flazz/vim-colorschemes'
  " autocomplete
  Bundle "ervandew/supertab"
  " shows M of N search results for /,?,n,N,*,# searching
  Bundle 'IndexedSearch'
  " syntax checking/warnings
  Bundle 'scrooloose/syntastic'
  " Git-like undo history
  Bundle "sjl/gundo.vim"
  " Shows all yanks past
  Bundle "vim-scripts/YankRing.vim"
  " Ack integration with Vim
  Bundle 'mileszs/ack.vim'
  " find matching delimiter with %
  Bundle 'matchit.zip'
  " ctags-code navigation
  Bundle 'taglist.vim'
  " User-defined text objects
  Bundle 'textobj-user'
  " ir/ar ruby block objects
  Bundle 'textobj-rubyblock'
  " text object with a_ / i_
  Bundle 'lucapette/vim-textobj-underscore'
  " indentation-based objects ii/ai/iI/aI
  Bundle 'vim-indent-object'
  " highlight trailing or inconsistent whitespace
  Bundle 'bitc/vim-bad-whitespace'
  " set the current *args* based on the files listed in the QuickFix list
  Bundle 'henrik/vim-qargs'
  "
  Bundle 'vim-ruby/vim-ruby'
  "
  Bundle 'vim-scripts/blockle.vim'
  Bundle 'tpope/vim-rails'
  Bundle 'tpope/vim-rake'
  Bundle 'tpope/vim-bundler'
  Bundle "tpope/vim-cucumber"
  Bundle "tpope/vim-endwise"
  Bundle 'tpope/vim-haml'
  Bundle 'tpope/vim-commentary'
  Bundle 'tpope/vim-surround'
  Bundle 'tpope/vim-fugitive'
  Bundle "tpope/vim-unimpaired"
  Bundle 'pangloss/vim-javascript'
  Bundle 'kchmck/vim-coffee-script'
  Bundle 'rizzatti/funcoo.vim'
  Bundle 'rizzatti/dash.vim'
  Bundle 'sjl/vitality.vim'
  Bundle 'ekalinin/Dockerfile.vim'
  Bundle 'jnwhiteh/vim-golang'

  filetype plugin indent on  " Automatically detect file types. (must turn on after Vundle)
" }

" Primary key setup {
  let mapleader=' ' " leader key is <space>

  " <space><space> to go back to previous buffer
  nnoremap <leader><leader> <c-^>
" }

" Looks {
  colorscheme Monokai
  " set background=dark
  set showmode     " display the current mode

  set nocursorline   " highlight current line
  " toggle cursor highlighting
  nnoremap <Leader>c :set cursorline!<CR>

  " Show lines on 80 and 100 chars
  set colorcolumn=80,100
" }

" Basic config {
  set ruler " show cursor position in the status bar
  syntax on " enable syntax highlighting

  set mouse=a

  " Absolute line numbers in insert mode, and relative in normal mode
  set number relativenumber
  autocmd InsertEnter * :set number norelativenumber
  autocmd InsertLeave * :set number relativenumber

  set encoding=utf-8

  set clipboard=unnamed
" }

" Whitespace {
  set tabstop=2
  set shiftwidth=2
  set softtabstop=2
  set expandtab
  " remove trailing whitespace on save
  autocmd BufWritePre * :%s/\s\+$//e
  set smartindent
" }


" Searching {
  set hlsearch
  set incsearch
  set ignorecase
  set smartcase
  nnoremap N Nzz
  nnoremap n nzz

  " unset the "last search pattern" register by hitting return
  nnoremap <CR> :noh<CR><CR>
" }

" retain visual selection on < or > indent commands
vnoremap > >gv
vnoremap < <gv

" move the current line up and down
nnoremap <C-J>      :m+<CR>==
nnoremap <C-K>      :m-2<CR>==

" Tab completion
set wildmode=list:longest,list:full

" Ignored filetypes/directories
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*,*.sassc,*.scssc,tmp/*,log/*,*.png,*.jpg,*.pdf,*.zip,*.gz,public/assets/*,public/uploads/*

" always show status line for all windows
set laststatus=2

" Windows {
  " Auto collapse/zoom panes based on focus
  set winheight=7
  set winminheight=5
  set winheight=999

  set winwidth=84
  set noequalalways
" }

" autosave
au FocusLost * silent! wa
au BufLeave * silent! wa
set autowrite

" Wrapping {
  set wrap linebreak " soft-wrap
  set nolist " list disables linebreak
  set cpoptions+=n " use line-numbers column for wrap indicator
  let &showbreak="+++ " " wrap indicator

  " don't do auto-hard-wrapping, except for comments
  set formatoptions+=l " don't break long lines in insert mode
  " set formatoptions+=r " insert comment leader after <Enter> in insert mode
  set formatoptions+=n " recognize numbered lists and use for autoindent
  set formatoptions+=o " insert comment leader on 'o' or 'O'
  set formatoptions+=c " auto-wrap comments
  set formatoptions+=q " allow formatting comments with 'gq'
  " set formatoptions+=j " remove comment leader in between joined lines
  set formatoptions-=t " don't use textwidth to auto-wrap text
  set textwidth=80 " wrap things at 80 chars
" }

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Use modeline overrides, check the first 10 lines of files for such directives
set modeline
set modelines=10

" Directories for swp files
set backupdir=~/.vim/backup
set directory=~/.vim/backup

" When on, the ":substitute" flag 'g' is default on.  This means that
" all matches in a line are substituted instead of one.
set gdefault

" When a bracket is inserted, briefly jump to the matching one.  The
" jump is only done if the match can be seen on the screen.  The time to
" show the match can be set with 'matchtime'.
set showmatch

" Exit insert mode by mashing j and k
inoremap jk <esc>
inoremap kj <esc>

" Save with leader-W
nmap <leader>w :w<cr>

" Disable F1 for help
map <F1> <nop>

" Plugin configs {
  " CommandT {
    let g:CommandTTagIncludeFilenames=1
    let g:CommandTMatchWindowReverse=1
    nnoremap <leader>t :CommandT<cr>
    nnoremap <leader>] :CommandTTag<cr>
    nnoremap <leader>j :CommandTJump<cr><cr>
  " }

  " Syntastic {
    let g:syntastic_enable_signs=1
    let g:syntastic_quiet_messages = {'level': 'warnings'}
    let g:syntastic_coffee_coffeelint_args='--csv --file ~/Code/GoodGuide/coffeescript-style-guide/coffeelint_config.json'
    let g:syntastic_ruby_checkers=['mri', 'rubocop']
    let g:syntastic_go_checkers=['go', 'gofmt', 'govet']
  " }

  " Gundo {
    " Open undo tree buffer
    nnoremap <Leader>u :GundoToggle<CR>
  " }

  " YankRing {
    " Open Show yank ring buffer
    nnoremap <Leader>y :YRShow<CR>
  " }

  " Commentary {
    nmap <leader>/ <plug>CommentaryLine<CR>
    vmap <leader>/ <plug>Commentary<CR>
  " }

  " Fugitve {
    nmap <leader>gb :Gblame<CR>
    nmap <leader>gs :Gstatus<CR>
    nmap <leader>gd :Gdiff<CR>
    nmap <leader>gl :Glog<CR>
    nmap <leader>gc :Gcommit<CR>
    nmap <leader>gp :Git push<CR>
  " }

  " Rails.vim {
    nnoremap <leader>a :A<CR>  " Go to alternate file
  " }

  " Ruby {
    " Alternate between do; end and { } blocks in ruby
    let g:blockle_mapping = '<Leader>{'
    autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
    autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
    autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
    autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
  " }

  " IndentGuides {
    let g:indent_guides_enable_on_vim_startup = 1
    let g:indent_guides_default_mapping = 0
    let g:indent_guides_auto_colors = 0
    autocmd ColorScheme * hi IndentGuidesOdd  guibg=red   ctermbg=233
    autocmd ColorScheme * hi IndentGuidesEven guibg=green ctermbg=234
  " }

  " Dash.vim {
    nmap <silent> <leader>d <Plug>DashSearch
  " }

  " Coffeescript {
    map <leader>C :CoffeeCompile vert<CR>
    vmap <leader>C <esc>:'<,'>:CoffeeCompile vert<CR>
    " command! -nargs=1 C CoffeeCompile | :<args>
    au BufNewFile,BufReadPost,BufWritePost *.coffee set foldmethod=indent
  " }

  " Go {
    autocmd FileType go autocmd BufWritePre <buffer> Fmt
  " }
" }



" CTags {
  " Retag all files in project
  map <Leader>rt :!ctags --extra=+f -R *<CR><CR>
  map <C-\> :tnext<CR>

  au BufWritePost *.rb silent! !ctags --extra=+f -R > /dev/null 2>&1 &
  au BufWritePost *.coffee silent! !ctags --extra=+f -R > /dev/null 2>&1 &
  au BufWritePost *.js silent! !ctags --extra=+f -R > /dev/null 2>&1 &
" }




" Filetypes {
  augroup filetypedetect
    au! BufRead,BufNewFile *_spec.rb    set filetype=rspec.ruby
  augroup END

  " Thorfile, Rakefile, Vagrantfile and Gemfile are Ruby
  au BufRead,BufNewFile {Capfile,Guardfile,Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru}    set ft=ruby

  " Nginx config
  au BufRead,BufNewFile *.conf set ft=nginx

  " Force hamlc templates to syntax highlight (ghetto)
  au BufRead,BufNewFile *.hamlc set ft=haml

  au BufRead,BufNewFile,BufWritePost *.{scss,sass} set foldmethod=indent foldignore=""

  augroup vimrc
    au BufReadPre * setlocal foldmethod=indent
  augroup END

  " Autoreload when .vimrc files change
  augroup myvimrc
    au!
    au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC | if has('gui_running') | so $MYGVIMRC | endif
  augroup END
" }

au BufRead,BufNewFile * normal zR

" / for the current word in the current buffer
nmap <Leader>n /<C-r><C-w><cr>
" Ack for the current work
nmap <Leader>f :Ack <C-r><C-w><cr>
" replace the current word in the buffer
nmap <Leader>r :%s/<C-r><C-w>//gc<Left><Left><Left>


" Add extra block object mods (eg ci/ ) {
  let pairs = [ ".", ":", ",", ";", "<bar>", "/", "<bslash>", "*", "( )", "{ }", "< >"]
  for keychars in pairs
    let keys = map(split(keychars), "substitute(v:val, '^\s*\(.\{-}\)\s*$', '\1', '')")
    let key = keys[0]
    let ekey = key

    if len(keys) > 1
      let ekey = keys[1]
    endif

    execute "nnoremap ci".key." f".ekey."cT".key
    execute "nnoremap di".key." f".ekey."dT".key
    execute "nnoremap yi".key." f".ekey."yT".key
    execute "nnoremap vi".key." f".ekey."vT".key
    execute "nnoremap ca".key." f".ekey."lcF".key
    execute "nnoremap da".key." f".ekey."ldF".key
    execute "nnoremap ya".key." f".ekey."lyF".key
    execute "nnoremap va".key." f".ekey."lvF".key
  endfor
" }
